//#include <stdio.h>
//#include <string.h>
//#include <omnetpp.h>
//#include <queue>
//#include "msg_makeby_host_m.h"
//
//using namespace omnetpp;
//using namespace std;
//
//
//class SimpleSource : public cSimpleModule
//{
//  private:
//    int count;
//    int EXB_SIZE;
//    double SIMULATOR_TIME;
//    double MSG_GEN_INTERVAL;
//    double CHANNEL_DELAY = 0.015;
//    queue<int> sourceQueue;
//    queue<int> exitBuffer;
//    int lastMsgId = -1;
//    void SQtoEXB();
//    void sendMsg();
//    void incNumSpacesOfNextENB();
//  protected:
//    virtual void initialize() override;
//    virtual void handleMessage(cMessage *msg) override;
//};
//
//Define_Module(SimpleSource);
//
//void SimpleSource::initialize()
//{
//    MSG_GEN_INTERVAL = getParentModule()->par("MSG_GEN_INTERVAL");
//    SIMULATOR_TIME = getParentModule()->par("SIMULATOR_TIME");
//    EXB_SIZE = getParentModule()->par("EXB_SIZE");
//    count = EXB_SIZE;
//
//    scheduleAt(0, new cMessage("generate"));
//
//    scheduleAt(0, new cMessage("send"));
//}
//
//void SimpleSource::handleMessage(cMessage *msg)
//{
//    if (simTime() >= SIMULATOR_TIME){
//        delete(msg);
//        return;
//    }
//
//    if (strcmp(msg->getName(), "generate") == 0) {
//
//            sourceQueue.push(++lastMsgId);
//            EV<< "Message generated by Host" << endl;
//            scheduleAt(simTime() + MSG_GEN_INTERVAL, msg);
//
//            if (exitBuffer.size() < EXB_SIZE) {
//                SQtoEXB();
//            }
//
//
//    }
//    if (strcmp(msg->getName(), "send") == 0) {
//            if(count > 0){
//                sendMsg();
//                SQtoEXB();
//            }
//
//            scheduleAt(simTime() + CHANNEL_DELAY, msg);
//    }
//    if (strcmp(msg->getName(), "NotifyHost") == 0) {
//            count++;
//        }
//
//}
//
//void SimpleSource::SQtoEXB ()
//{
//    if (!sourceQueue.empty()){
//            int msgId = sourceQueue.front();
//            sourceQueue.pop();
//            exitBuffer.push(msgId);
//
//    }
//}
//
//void SimpleSource::sendMsg(){
//    if (!exitBuffer.empty()) {
//
//        int sentMsgId = exitBuffer.front();
//        exitBuffer.pop();
//
//        //to make diffrent name of message, cause when you delete mess in Des, don't delete all mess
//        char name[50];
//        sprintf(name, "MsgFromHost%d", sentMsgId);
//
//        MessageMakeByHost *sentMsg = new MessageMakeByHost(name);
//        sentMsg->setId(sentMsgId);
//        sentMsg->setSource(getIndex());
//        send(sentMsg, "out");
//
//        count--;
//    }
//}
//
